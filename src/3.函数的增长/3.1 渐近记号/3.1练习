// O' 表示 渐进集合  Ω 表示 渐近下界


3.1-1
  假设 max(f(n), g(n)) = f(n)
  则：  (f(n) + g(n)) <= 2f(n)    <==>   (f(n) + g(n)) / 2 <= f(n)
                                         f(n) <= f(n) + g(n) 
  存在n0使n > n0 时 1/2 (f(n) + g(n)) <= f(n) <= f(n) + g(n)
  即 c1 = 1/2  c2 = 1 使 c1 O(f(n) + g(n)) <= f(n) <= c2 (f(n) + g(n))
  同理可证 max(f(n), g(n)) = g(n)

3.1-2
  (n + a)^b
  = n^b + C(1,b)n^(b-1)a^1 + C(2,b)n^(b-2)a^2 + ..... + a^b
  最高项为n^b
  随意渐进界为 O'(n^b)

3.1-3
  O是渐近上界 o是非紧渐近上界 Ω 是渐近下界 w是非紧渐近下界
  至少表示下界

3.1-4
  2^(n+1) 与 O(2^n)
  2^(n+1) = 2 * 2^n => c 2^n => O(2^n)
  2^(2n)  = 4^n => O(4^n)

3.1-5
  f(n) = O'(g(n)) 当且仅当 f(n) = O(g(n)) f(n) = M(g(n))
  根据渐进符号的数学表达式可知
  因为f(n)=O'(g(n))，所以f(n)=O(g(n)),f(n)=Ω(g(n))
  因为f(n)=O(g(n)),f(n)=Ω(g(n))，所以f(n)=O'(g(n))。

3.1-6
  算法运行时间为O'(g(n)) 则其上界为O(g(n)) 下界为Ω(g(n))
  最好时间为下界Ω(g(n)) 最坏时间为上界O(g(n))

3.1-7
  o(g(n)) 与 w(g(n))的交集
  对于o  存在c>0 使n>0时 0<= f(n) < cg(n);
  对于w  存在c>0 使n>0时 0<= cg(n) < f(n)
  当取两次n最大值时 f(n) < cg(n) < f(n) 即不存在这样的情况

3.1-8
  ????