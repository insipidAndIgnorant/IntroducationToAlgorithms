TREE-SEARCH(x, k)
  if(x.key == k || x == NIL)
    return x
  else if k < x.key
    return TREE-SEARCH(x.left, k)
  else
    return TREE-SEARCH(x.right, k)

ITEARATIVE-TREE-SEARCH(x, k)
  while(x)
    if x == NIL || x.key == k
      return x
    else if k < x.key
      x = x.left
    else
      x = x.right


TREE-MINIMUM(x)
  while x.left != NIL
    x = x.left
  return x

TREE-MAXiMUM(x)
  while x.right != NIL
    x = x.right
  return x

TREE-SUCCESSOR(x)
  if x.right != NIL
    return TREE-MINIMUM(x.right)

  y = x.parent
  // x == y.right 确保找到的为最低的祖先，且该点左节点为x的祖先  // 最低祖先节点就是从根节点遍历到给定节点时的最后一个相同节点，或最近公共父节点
  while y != NIL && x == y.right
    x = y
    y = y.parent
  return y

TREE-PREDECESSOR(x)
  if x.left != NIL
    return TREE-MAXiMUM(x.left)
  
  y = x.parent
  while y != NIL && x == y.left
    x = y
    y = y.parent
  return y