12.3.1
  TREE-INSERT-R(T,u,k)
    if u.p == NIL && u == NIL
      return T.root = k

    if u == NIL
      if k.key < u.p.key
        u.p.left = k
      else
        u.p.right = k
      return

    if k.key < u.key
      return TREE-INSERT-R(T,u.left, k)
    else
      return TREE-INSERT-R(T, u.right,k)


12.3.2
  插入时需要先进行查找合适的位置插入
  查询时+1是到该节点的时间

12.3.3
  最好情况：O(nlgn)
  最坏情况：O(n^2)

12.3.4
  不可以
            15                       15                                     15
      6                        8                                   7
  3       8         3=>6=>   7   9                   6=>3=>           8   
        7    9                                                           9
  // 主要利用删除时对孩子节点数的判定

12.3.5


12.3.6
  当使用前驱时
  TREE-DELETE(T,z)
    if z.left === NIL
      TRANS-PLANT(T, z, z.right)
    else if z.right === NIL
      TRANS-PLANT(T, z, z.left)
    else
      y = TREE-MAXiMUN(z.left)
      if y.p != z
        TRANS-PLANT(T, y, y.left)
      TRANS-PLANT(T, z, y)
      y.right = z.right
      y.right.p = y
