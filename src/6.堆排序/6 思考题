6.1
  a:不一样
  A=[4,1,3,2,16,9,10,14,8,7]

  建堆：
     A=[4,1,3,14,16,9,10,2,8,7]
     A=[4,1,10,14,16,9,3,2,8,7]
     A=[4,16,10,14,7,9,3,2,8,1]
     A=[16,14,10,8,7,9,3,2,4,1]
  插入建堆：
     A=[4,1,3]
     A=[4,2,3,1]
     A=[16,4,3,1,2]
     A=[16,4,9,1,2,3]
     A=[16,4,10,1,2,3,9]
     A=[16,14,10,4,2,3,9,1]
     A=[16,14,10,8,2,3,9,1,4]
  
  b:最坏情况下每次插入都要维护性质且交换次数为h = lgi
    ∑i=2 to n lgi <= ∑i=2 to n lgn = O(nlgn)

6.2
  a: paenrt(i) = (i+2)/d   left(i) = di-2

  b: logd n

  c: EXTRACT-MAX:
     max = A[1]; A[1] = A[size]
     MAX-HEPIFY(A, 1);
     return max
     交换logd n次 每次O(d)
     O(d logd n)

  d: INSERT:
     size ++
     A[size] = -INF
     INCREASE-KEY(A, size, key)
     最坏情况维护到跟节点: O(logd n)

  e: INCREASE-KEY:
     A[i] = key;
     while (i>1 and A[paenrt(i)]<A[i]) {
         exchange(A,i,paenrt(i))
         i = paenrt(i)
     }
     最坏情况叶节点增加，维护到根 O(logd n)

6.3
  a:   2  3  4  5
       8  9 12 14
       16
  b: 若第一个元素为INF因每行每列都递增，则其他元素大于INF，这是不可能的，因而只能都为INF表示空
     若右下角不为INF，则其他元素小于INF， 表示都有元素
  
  c: EXTRACT-MIN:
     min = A[1,1]; A[1,1] = A[m,n]
     在列和行上向右、下比较，不断寻找合适位置

  d:INSERT:
    A[m,n] = key
    在列和行上向左、上比较，不断寻找合适位置

  e: 循环调用EXTARCT-MIN

  f: 从右上角或左下角开始 (因为这两点在两个方向上一增一减，利于判断方向)
     若大于起始点 利用大小关系不断在两个方向寻找