6.5-1
  15 <=> 1 save 15
  1 <=> 13 1 <=> 12 1 <=> 6

6.5-2
  size++
  A[size] = -INF
  A[size] = 10
  10 <=> 8 10 <=> 9

6.5-3
  MINI:
    return A[1]
  EXTRACT-MINI:
    min = A[1];
    A[1] = A[size]
    MIN-HEAPIFY(A,1)
    return min
  DECREASE-KEY:
    A[i] = key
    while (i>1 && A[parent(i)] > A[i] ) {
        exchange(A, i, parent(i))
        i = parent(i)
    }
  INSERT:
    size++
    A[size] = INF
    DECREASE(A, i, key)

6.5-4
  保持最大堆性质

6.5-5
  初始：A[i]增加，若不大于A[parent(i] 则仍满足性质， 若大于则违背
  循环：i=1则为根元素，增加不影响。若不为1： 将A[i]增加至key，则子树仍满足性质，此时若堆不满足性质，只能是因为A[i] > A[parent(i)]破坏了性质
  终止：i=1已到根； A[i] < A[parent(i)], i的子树必然满足性质，因其小于父，则向上也满足性质

6.5-6
  key为增长至的值则
   while(i>1 and A[parent(i)]<key) {
       A[i] = A[parent(i)]
       i = parent(i)
   }
   A[i] = key

6.5-7
  队列：优先度降序插入
  栈：  优先度升序插入

6.5-8
  HEAI-DELETE:
    exchange(A, i, size)
    size--
    MAX-HEAPIFY(A, i)

6.5-9:
  1: 将k个链表中最小元素取出，组成最小堆  O(k)
  2: 取出堆最小放入结果数组， O(lgk)
     再从被取出元素所在链表的最小插入堆中 O(lgk), 如果为空，则继续取出堆最小放入结果
  3：重复2，直到堆为空。 (n-k)步骤2 => O((n-k)lgk)
  总 = O(k) + O((n-k)lgk) = O(nlgk)
  
