4.1-1
  最大的负数

4.1-2
  function forceMaxSubArray (array) {
    let low = 0, high = 0, sum = Number.MIN_SAFE_INTEGER;
    for (let i =0; i< array.length; i++) {
        let innerTmpSum = 0;
        for (let j = i; j < array.length; j++) {
            innerTmpSum += array[j];
            if (innerTmpSum > sum) {
                sum = innerTmpSum;
                low = i, high = j;
            }
        }
    }

    return { low, high, sum }
  }

4.1-3
  O(n^2) 和 O(nlgn)的相交点n的值
  修改 将基本情况从low=high改为 high - low < k时
  此时为O(nlg(n/k))

4.1-4
  在最后返回时添加判断如果为负，则置空

4.1-5
  function lineMaxSubArray (array) {
    // preMax 前最大子数组
    let preMax = {
        low: 0,
        high: 0,
        sum: array[0]
    };
    // 前数组最大边界数组
    let preBoundryMax = {
        low: 0,
        high: 1,
        sum: array[0]
    }

    // 设前数组为A[0  -  i-1], 求[0 - i]得最大子数组要么不包含A[i](即前最大子数组)
    // 要么包含A[i] 包含A[i]又可分为只有A[i] 和 A[i]与前边界数组组的组合
    // 比较包含A[i]和前最大子数组 就能找到A[0 - i]的最大数组
    for (let i = 1; i< array.length; i++) {
        // 仅A[i]
        let now = {
            low: i,
            high: i,
            sum: array[i]
        }

        // 包含A[i]和前边界数组
        let nowBoundryMax = {
            low: preBoundryMax.low,
            high: i,
            sum: array[i] + preBoundryMax.sum
        }

        // 比较包含A[i]两种情况
        if(now.sum < nowBoundryMax.sum) {
            // 求出包含A[i]最大后 再与前最大比较 更新各属性
            if (nowBoundryMax.sum > preMax.sum) {
                preMax = { ...nowBoundryMax }
            }
            preBoundryMax = { ...nowBoundryMax }

        } else {

            if (now.sum > preMax.sum) {
                preMax = { ...now }
            }
            preBoundryMax = { ...now }

        }

    }

    return preMax

  }