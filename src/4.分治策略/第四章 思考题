4.1
  a: f(n) = n^4  lobb a = 1 => O(n^4)
  b: f(n) = n^1  lobb a = 0 => O(n)
  c: f(n) = n^2  lobb a = 2 => O(n^2 lgn)
  d: f(n) = n^2  lobb a < 2 => O(n^2)
  e: f(n) = n^2  lobb a > 2 => O(n^lg7)
  f: f(n) = n^1/2  lobb a = 1/2 => O(n^1/2 lgn)
  g: n/2 * n^2   + T(1)  => O(n^3)

4.2
  二分查找
  指针：T(n) = T(n/2) + c => O(lgn)
  元素：T(n) = T(n/2) + cN => f(n) = n^0 logb a = 0 => cN lgn => nlgn (N为T(n)数组规模是常数)
  部分：T(n) = T(n/2) + cn => f(n) = n logb a =0 => O(n)

  归并:
  指针: T(n) = 2T(n/2) + cn + 2c => O(nlgn)
  元素：T(n) = 2T(n/2) + cn + 2N => O(nlgn) + 2N + 4N + 8N + ... + 2^lgn N => O(n^2)
  部分：T(n) = 2T(n/2) + cn + 2 n/2 => T(n) = 2T(n/2) + (c+1)n => O(nlgn)

4.3
  a: n^logb a > Ω(f(n))  => O(n^log4 3)
  b:  T(n) = 3T(n/3) + n/lgn
          n          n/lgn
    n/3  n/3  n/3    n/3 * 3 / lgn/3 = n/lgn/3
    n/9 ....  n/9    n/9 * 9 / lgn/9 = n/lgn/9
    ....
    1 1  1           n
    T(n) = 

  c: f(n) =n^5/2 logb a =2 => O(n^5/2)
  d: 在n足够大时 O(nlgn)
  e:
  f: // T(n) = T(n/2) + T(n/4) + T (n/8) +n
  g: f(n) = n^-1 logb a = 0 => O(n)
  h: 
  i:
  j: 

4.4:
 a: 4.4-a.jpg
 b: 4.4-b.jpg
 c: 参照CSDN vikYao 解法
 d: 不能理解

4.5
 a: 将芯片分为3组，(a)好的 (b)数量和a组相同的坏的 (c)剩下的坏的，若每组都坚持认为本组是好的而其它组的都是坏的，则a组和b组无法区分
 b: 将芯片两两配对，对于后三种情况（至少其中一个是坏的），可以直接将该对芯片丢弃，这样丢弃的好的一定不会超过坏的。
 剩下的都是第一种情况，以及可能剩下的单个未配对的。如果数量为偶数，即没有未配对的，那么“好好”对数一定超过“坏坏”对数，
 所以每对里面丢弃一个即可。如果数量为奇数，则保留那个未配对的，并且每对丢掉一个
 c: T(n) = T(n/2) + n/2 => o(n)

4.6
 当 i+1 =k, j+1 = l => 
 A[i,j] + A[k,l] <= A[i,l] + A[k,j]

 b: A[0,2] = 24 // 用笨办法一个一个计算出来的
 c: 4.6-c.jpg
 d；
 e: